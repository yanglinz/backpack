package tools

import (
	"fmt"
	"io/ioutil"
	"path/filepath"
	"strings"

	"github.com/goccy/go-yaml"
	"github.com/yanglinz/backpack/internal"
)

var composeHeader = `# @backpack
# This is an autogenerated docker-compose file.
# It is not meant to be hand-edited.

`

type composeBuild struct {
	Context    string `yaml:"context"`
	Dockerfile string `yaml:"dockerfile"`
}

type composeService struct {
	Image       string       `yaml:"image,omitempty"`
	Build       composeBuild `yaml:"build,omitempty"`
	Entrypoint  string       `yaml:"entrypoint,omitempty"`
	Command     string       `yaml:"command,omitempty"`
	Environment []string     `yaml:"environment,omitempty"`
	Ports       []string     `yaml:"ports,omitempty"`
	Volumes     []string     `yaml:"volumes,omitempty"`
	DependsOn   []string     `yaml:"depends_on,omitempty"`
}

// ComposeConfig is a struct of the standard docker-compose.yml config
type ComposeConfig struct {
	Version  string                 `yaml:"version"`
	Services map[string]interface{} `yaml:"services"`
}

func getDependentServices(context internal.Context) map[string]interface{} {
	services := make(map[string]interface{})

	// Add postgres to services
	if context.Services.Postgres {
		service := composeService{
			Image: "postgres:11.6",
			Environment: []string{
				"POSTGRES_DB=postgres",
				"POSTGRES_PASSWORD=postgres",
				"POSTGRES_USER=postgres",
			},
			Ports:   []string{"5432:5432"},
			Volumes: []string{"./var/postgres:/var/lib/postgresql/data"},
		}
		services["postgres"] = service
	}

	// Add redis to services
	if context.Services.Redis {
		service := composeService{
			Image: "redis:5.0.5",
		}
		services["redis"] = service
	}

	return services
}

func getServerServices(context internal.Context) map[string]interface{} {
	services := make(map[string]interface{})

	for _, p := range context.Projects {
		settingsPath := filepath.Join(p.Path, "settings.py")
		fmt.Println(settingsPath)
	}

	return services
}

// GetComposeConfig creates a yaml map of docker-compose.yml
func GetComposeConfig(context internal.Context) ComposeConfig {
	services := make(map[string]interface{})

	// Get dependent services
	dependentServices := getDependentServices(context)
	for k, v := range dependentServices {
		services[k] = v
	}

	// Get server services
	serverServices := getServerServices(context)
	for k, v := range serverServices {
		services[k] = v
	}

	// Generate config
	composeConfig := ComposeConfig{
		Version:  "3.6",
		Services: services,
	}
	return composeConfig
}

// CreateComposeConfig creates the project docker-compose.yml
func CreateComposeConfig(context internal.Context) {
	config := GetComposeConfig(context)
	configYaml, _ := yaml.Marshal(config)
	content := strings.Join([]string{composeHeader, string(configYaml)}, "")

	composePath := filepath.Join(context.Root, "docker-compose.yml")
	err := ioutil.WriteFile(composePath, []byte(content), 0644)
	if err != nil {
		panic(err)
	}
}
