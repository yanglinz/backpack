package tools

import (
	"io/ioutil"
	"path/filepath"
	"strings"

	"github.com/goccy/go-yaml"
	"github.com/yanglinz/backpack/internal"
)

var composeHeader = `# @backpack
# This is an autogenerated docker-compose file.
# It is not meant to be hand-edited.

`

type composeBuild struct {
	Context    string `yaml:"context"`
	Dockerfile string `yaml:"dockerfile"`
}

type composeService struct {
	Image       string       `yaml:"image,omitempty"`
	Build       composeBuild `yaml:"build,omitempty"`
	Entrypoint  string       `yaml:"entrypoint,omitempty"`
	Command     string       `yaml:"command,omitempty"`
	Environment []string     `yaml:"environment,omitempty"`
	Ports       []string     `yaml:"ports,omitempty"`
	Volumes     []string     `yaml:"volumes,omitempty"`
	DependsOn   []string     `yaml:"depends_on,omitempty"`
}

// ComposeConfig is a struct of the standard docker-compose.yml config
type ComposeConfig struct {
	Version  string                 `yaml:"version"`
	Services map[string]interface{} `yaml:"services"`
}

func getStartCommand(bashCommands []string) string {
	return "bash -c \"" + strings.Join(bashCommands, " \\\n && ") + "\""
}

func getDependentServices(context internal.Context) map[string]interface{} {
	services := make(map[string]interface{})

	// Add postgres to services
	if context.Services.Postgres {
		service := composeService{
			Image: "postgres:11.6",
			Environment: []string{
				"POSTGRES_DB=postgres",
				"POSTGRES_PASSWORD=postgres",
				"POSTGRES_USER=postgres",
			},
			Ports:   []string{"5432:5432"},
			Volumes: []string{"./var/postgres:/var/lib/postgresql/data"},
		}
		services["postgres"] = service
	}

	// Add redis to services
	if context.Services.Redis {
		service := composeService{
			Image: "redis:5.0.5",
		}
		services["redis"] = service
	}

	return services
}

func getServerService(context internal.Context, project internal.Project) (string, composeService) {
	build := composeBuild{
		Context:    ".",
		Dockerfile: ".backpack/configs/docker/python-dev.Dockerfile",
	}

	startCommand := ".backpack/configs/scripts/dev-django.sh"
	commands := []string{startCommand}
	if context.Services.Postgres {
		commands = []string{
			".backpack/configs/scripts/wait-for-it.sh -t 60 postgres:5432",
			".backpack/configs/scripts/wait-for-pg.sh",
			"sleep 2",
			startCommand,
		}
	}

	ports := []string{"8000:8000"}
	volumes := []string{".:/app/", "/app/node_modules", "$HOME/.aws:/home/app/.aws/"}

	djangoSettingsModule := filepath.Join(project.Path, "settings")
	djangoSettingsModule = strings.ReplaceAll(djangoSettingsModule, "/", ".")
	environment := []string{
		"DJANGO_SETTINGS_MODULE=" + djangoSettingsModule,
		// Set a custom local dev only env var to help applications
		// Distinguish whether they're running locally or in GCP
		"BACKPACK_DOCKER_COMPOSE=true",
	}

	dependsOn := []string{}
	if context.Services.Postgres {
		dependsOn = append(dependsOn, "postgres")
	}
	if context.Services.Redis {
		dependsOn = append(dependsOn, "redis")
	}

	service := composeService{
		Build:       build,
		Command:     getStartCommand(commands),
		Ports:       ports,
		Volumes:     volumes,
		Environment: environment,
		DependsOn:   dependsOn,
	}

	serviceName := project.Name + "_server"
	return serviceName, service
}

func getServerServices(context internal.Context) map[string]interface{} {
	services := make(map[string]interface{})

	// Add server services
	for _, p := range context.Projects {
		serviceName, service := getServerService(context, p)
		services[serviceName] = service
	}

	return services
}

// GetComposeConfig creates a yaml map of docker-compose.yml
func GetComposeConfig(context internal.Context) ComposeConfig {
	services := make(map[string]interface{})

	// Get dependent services
	dependentServices := getDependentServices(context)
	for k, v := range dependentServices {
		services[k] = v
	}

	// Get server services
	serverServices := getServerServices(context)
	for k, v := range serverServices {
		services[k] = v
	}

	// Generate config
	composeConfig := ComposeConfig{
		Version:  "3.6",
		Services: services,
	}
	return composeConfig
}

// CreateComposeConfig creates the project docker-compose.yml
func CreateComposeConfig(context internal.Context) {
	config := GetComposeConfig(context)
	configYaml, _ := yaml.Marshal(config)
	content := strings.Join([]string{composeHeader, string(configYaml)}, "")

	composePath := filepath.Join(context.Root, "docker-compose.yml")
	err := ioutil.WriteFile(composePath, []byte(content), 0644)
	if err != nil {
		panic(err)
	}
}
